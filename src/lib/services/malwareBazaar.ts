import { supabase } from '../supabase';

interface MalwareBazaarResponse {
  query_status: string;
  data: {
    sha256_hash: string;
    file_name: string;
    signature: string;
    threat_level: number;
  }[];
}

export async function checkMalwareBazaar(hash: string): Promise<{
  isMatch: boolean;
  threat?: {
    name: string;
    signature: string;
    threatLevel: number;
  };
}> {
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  
  if (!supabaseUrl) {
    throw new Error('Supabase URL not configured');
  }

  try {
    const formData = new FormData();
    formData.append('query', 'get_info');
    formData.append('hash', hash);

    console.log('Checking MalwareBazaar for hash:', hash);

    const response = await fetch(
      `${supabaseUrl}/functions/v1/malware-check?service=malwarebazaar`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`
        },
        body: formData
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data: MalwareBazaarResponse = await response.json();
    console.log('MalwareBazaar response:', data);

    if (data.query_status === 'ok' && data.data.length > 0) {
      const match = data.data[0];
      return {
        isMatch: true,
        threat: {
          name: match.file_name,
          signature: match.signature,
          threatLevel: match.threat_level
        }
      };
    }

    return { isMatch: false };
  } catch (error) {
    console.error('MalwareBazaar API error:', error);
    return { isMatch: false };
  }
}