import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { hash } = await req.json();

    // Check MalwareBazaar
    const mbFormData = new URLSearchParams();
    mbFormData.append('query', 'get_info');
    mbFormData.append('hash', hash);

    const mbResponse = await fetch('https://mb-api.abuse.ch/api/v1/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Auth-Key': 'f3f16a3ac4dd695dfedbe488b64baa09183feda634756848'
      },
      body: mbFormData.toString()
    });

    const mbData = await mbResponse.json();

    // Check Hybrid Analysis
    const haResponse = await fetch(`https://www.hybrid-analysis.com/api/v2/search/hash`, {
      headers: {
        'api-key': '2wpwle48f1020492wh5tk5qx7b26ad01rshbz86e71c2ef725mzog5og28109541',
        'User-Agent': 'Hybrid-Analysis-JavaScript/1.0',
        'accept': 'application/json'
      }
    });

    const haData = await haResponse.json();

    return new Response(JSON.stringify({
      malwareBazaar: mbData,
      hybridAnalysis: haData
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});